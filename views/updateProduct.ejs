<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <title>Admin Panel</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.13/cropper.min.css" rel="stylesheet">
    <link rel="stylesheet" href="/css/admin.css">
    <style>
    .size-container {
      display: flex;
      flex-wrap: wrap;
      gap: 15px;
      margin: 10px 0;
    }
  
    .size-item {
      display: flex;
      align-items: center;
      gap: 10px;
      margin-bottom: 10px;
      background-color: #2A3038;
      padding: 10px;
      border-radius: 5px;
      box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
    }
  
    .size-checkbox {
      transform: scale(1.2);
      cursor: pointer;
    }
  
    .size-label {
      font-size: 14px;
      font-weight: bold;
      cursor: pointer;
      color: white;
    }
  
    .stock-input {
      display: none;
      padding: 5px;
      border: 1px solid #ccc;
      border-radius: 4px;
      font-size: 14px;
      width: 150px;
    }
  
    .stock-input:focus {
      border-color: #007bff;
      outline: none;
      box-shadow: 0 0 5px rgba(0, 123, 255, 0.5);
    }

    .modal {
      display: none;
      position: fixed;
      z-index: 1;
      left: 0;
      top: 0;
      width: 100%;
      height: 100%;
      overflow: auto;
      background-color: rgb(0,0,0);
      background-color: rgba(0,0,0,0.4);
      padding-top: 60px;
    }

    .modal-content {
      background-color: #191c24;
      margin: 5% auto;
      padding: 20px;
      border: 1px solid #888;
      width: 50%;
    }

    .close {
      color: #aaa;
      float: right;
      font-size: 28px;
      font-weight: bold;
    }

    .close:hover,
    .close:focus {
      color: black;
      text-decoration: none;
      cursor: pointer;
    }

  </style>
  </head>
  <body>
    <div class="container-scroller">
      <%- include("./layouts/aheader") %>

        <div class="container mt-5">
            <h2 class="pt-5">Update Product</h2>
        <form id="updateproduct">
            <div class="form-group">

                <input type="hidden" id="productId" name="productId" value="<%= product.id %>">

              <label for="name" class="pt-3">Product Name</label>
              <input type="text" id="name" name="name" class="form-control mb-3" value="<%= product.name %>">
          
              <label for="description" class="pt-3"> Description</label>
              <input type="text" id="description" name="description" class="form-control mb-3"  value="<%= product.description %>">
          
              <div class="form-group">

                <img src="/<%= product.images[0] %>" style="border-radius: 50%; height: 100px; width:100px" alt="" srcset="">
                <img src="/<%= product.images[1] %>" style="border-radius: 50%; height: 100px; width:100px" alt="" srcset="">
                <img src="/<%= product.images[2] %>" style="border-radius: 50%; height: 100px; width:100px" alt="" srcset="">
                <img src="/<%= product.images[3] %>" style="border-radius: 50%; height: 100px; width:100px" alt="" srcset="">

                <input type="file" class="form-control product-image" name="productImage1" id="productImage1" accept="image/*" onchange="previewAndCrop(event, 0)"/>
      
                <div class="cropPreviewSection" id="cropPreviewSection0" style="display: none">
                  <img id="cropPreview0" style="max-width: 100%"/>
                  <button type="button" onclick="startCropping(0)">
                    Crop Image 1
                  </button>
                </div>
      
                <input type="file" class="form-control product-image" name="productImage2" id="productImage2" accept="image/*" onchange="previewAndCrop(event, 1)"/>
      
                <div class="cropPreviewSection" id="cropPreviewSection1" style="display: none">
                  <img id="cropPreview1" style="max-width: 100%" />
                  <button type="button" onclick="startCropping(1)">
                    Crop Image 2
                  </button>
                </div>
      
                <input type="file" class="form-control product-image" name="productImage3" id="productImage3" accept="image/*" onchange="previewAndCrop(event, 2)"/>
      
                <div class="cropPreviewSection" id="cropPreviewSection2" style="display: none">
                  <img id="cropPreview2" style="max-width: 100%" />
                  <button type="button" onclick="startCropping(2)">
                    Crop Image 3
                  </button>
                </div>
      
                <input type="file" class="form-control product-image" name="productImage4" id="productImage4" accept="image/*" onchange="previewAndCrop(event, 3)"/>
      
                <div class="cropPreviewSection" id="cropPreviewSection3" style="display: none">
                  <img id="cropPreview3" style="max-width: 100%" />
                  <button type="button" onclick="startCropping(3)">
                    Crop Image 4
                  </button>
                </div>
              </div>
      
              <label for="category" class="pt-3">Category</label>
              <select id="category" name="category" class="form-control mb-3"  value="<%= product.category %>">
                <% categories.forEach(function(product) { %>
                  <option value="<%= product.name %>"> <%=product.name%></option>
                <% }) %>
              </select>

              <label for="image" class="pt-3">Price</label>
              <input type="number" id="price" name="price" class="form-control mb-3"  value="<%= product.price %>">
      
              <label for="image" class="pt-3">Offerprice</label>
              <input type="number" id="offerprice" name="offerprice" class="form-control mb-3"  value="<%= product.offerPrice %>">

              <label for="image" class="pt-3">Tags(should be seperated by commas)</label>
              <input type="text" id="tags" name="tags" class="form-control mb-3"  value="<%= product.tags %>">
      
              <label for="image" class="pt-3">Warranty</label>
              <input type="text" id="warranty" name="warranty" class="form-control mb-3"  value="<%= product.warranty %>">
      
              <label for="image" class="pt-3">Return Policy</label>
              <input type="text" id="returnpolicy" name="returnpolicy" class="form-control mb-3"  value="<%= product.returnPolicy %>">
      
            </div>

            <p id="msg" style="color:red"></p>
           
            <button type="submit" class="btn btn-primary mt-3 updatebtn" data-id="<%=product._id%>">Save Changes</button>
            <a href="/admin/productmanagement" class="btn btn-secondary mt-3">Cancel</a>
          </form>
          <button class="btn btn-primary" id="addStockBtn" >Add Stock</button>

          <div id="sizesModal" class="modal">
                <div class="modal-content">
                  <span class="close">&times;</span>
                  <h2>Update Available Sizes</h2>
                  <label for="sizes">Available Sizes:</label>
                  <div class="size-container">
                    <% for (let size = 6; size <= 12; size++) { %>
                      <div class="size-item">
                        <input type="checkbox" class="size-checkbox" name="sizes" value="<%= size %>" id="size_<%= size %>"
                          <% 
                            let variant = product.variants.find(v => v.size === size);
                            let checked = variant && variant.stock > 0 ? 'checked' : '';
                            let stockValue = variant ? variant.stock : '';
                          %>
                          <%= checked %> onchange="toggleStockInput(this, '<%= size %>')" />
                        <label class="size-label" for="size_<%= size %>">Size <%= size %></label>
                        <input type="number" class="stock-input" name="stockQuantities" id="stock_<%= size %>" 
                          placeholder="Stock for size <%= size %>" style="<%= (checked ? 'display: block;' : 'display: none;') %>"
                          value="<%= stockValue %>" min="1" />
                      </div>
                    <% } %>
                  </div>
                  <button type="button" id="saveSizesBtn">Save Changes</button>
                </div>
              </div>
          </div>
          </body>

          <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
          <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.13/cropper.min.js"></script>
            
            <script>

            document.getElementById("updateproduct").addEventListener("submit", async (e) => {
              e.preventDefault();
              const isValid = updateProductValidate();

              if (!isValid) return;

              const formData = new FormData();
              const id = document.getElementById("productId").value;
              formData.append("name", document.getElementById("name").value.trim());
              formData.append("description", document.getElementById("description").value.trim());
              formData.append("category", document.getElementById("category").value.trim());
              formData.append("price", document.getElementById("price").value.trim());
              formData.append("offerprice", document.getElementById("offerprice").value.trim());
              formData.append("warranty", document.getElementById("warranty").value.trim());
              formData.append("returnpolicy", document.getElementById("returnpolicy").value.trim());
              formData.append("tags", document.getElementById("tags").value.trim());

              croppedImages.forEach((image, index) => {
                formData.append(`productImage${index + 1}`, image);
              });

              try {
                const response = await fetch(`/admin/productmanagement/update/${id}`, {
                  method: "PUT",
                  body: formData,
                });
                const result = await response.json();

                if (result.success) {
                 swal.fire({
                  text:result.message,
                  icon:"success"
                 })
                 setTimeout(() => {
                  window.location.href = "/admin/productmanagement";
                 }, 2000);
                } else {
                  swal.fire({
                    text:result.message,
                    icon:"error"
                  })
                }
              } catch (error) {
                console.error("Error:", error);
                swal.fire({
                  text:"An error occured .Please try again later"
                })
              }
            });

            function updateProductValidate() {
              const name = document.getElementById("name").value.trim();
              const description = document.getElementById("description").value.trim();
              const price = document.getElementById("price").value.trim();
              const offerprice = document.getElementById("offerprice").value.trim();
              const tags = document.getElementById("tags").value.trim();
              const warranty = document.getElementById("warranty").value.trim();
              const returnpolicy = document.getElementById("returnpolicy").value.trim();

              const namereg = /^[a-zA-Z\s]+$/;
              const tagreg = /^(\w+)(,\s*\w+)*$/;

              const msg = document.getElementById("msg");

              if (name === "") {
                msg.innerHTML = "Enter a name";
                return false;
              }
              if (!namereg.test(name)) {
                msg.innerHTML = "Please enter a valid name (letters only)";
                return false;
              }
              if (description === "") {
                msg.innerHTML = "Description is required";
                return false;
              }
              if (price === "") {
                msg.innerHTML = "Price is required";
                return false;
              }
              if (price < 0) {
                msg.innerHTML = "Price cannot be negative";
                return false;
              }
              if (offerprice === "") {
                msg.innerHTML = "Offer price is required";
                return false;
              }
              if (offerprice < 0) {
                msg.innerHTML = "Offer price cannot be negative";
                return false;
              }
              if (tags === "") {
                msg.innerHTML = "Tags are required";
                return false;
              }
              if (!tagreg.test(tags)) {
                msg.innerHTML = "Tags should be comma-separated";
                return false;
              }
              if (warranty === "") {
                msg.innerHTML = "Warranty is required";
                return false;
              }
              if (returnpolicy === "") {
                msg.innerHTML = "Return policy is required";
                return false;
              }

              msg.innerHTML = "";
              return true;
            }

            const cropperInstances = [];
            const croppedImages = [];
            const allowedExtensions = ["jpg", "jpeg", "png"];

            function previewAndCrop(event, index) {
              const file = event.target.files[0];

              if (!file) return;

              const fileName = file.name.toLowerCase();
              const fileExtension = fileName.split(".").pop();
              if (!allowedExtensions.includes(fileExtension)) {
                swal.fire({
                  text:"Invalid file type! Please upload a JPG, JPEG, or PNG image.",
                  icon:"error"
                })
                event.target.value = ""
                return;
              }

              const cropPreview = document.getElementById(`cropPreview${index}`);
              const cropPreviewSection = document.getElementById(`cropPreviewSection${index}`);

              cropPreview.src = URL.createObjectURL(file);
              cropPreviewSection.style.display = "block";

              if (cropperInstances[index]) {
                cropperInstances[index].destroy();
              }

              cropperInstances[index] = new Cropper(cropPreview, {
                aspectRatio: 1,
                viewMode: 1,
                autoCropArea: 1,
                scalable: true,
                zoomable: true,
                movable: true,
              });
            }

            function startCropping(index) {
              const cropper = cropperInstances[index];
              if (!cropper) return;

              cropper.getCroppedCanvas().toBlob((blob) => {
                if (blob) {
                  croppedImages[index] = blob;

                  const cropPreviewSection = document.getElementById(`cropPreviewSection${index}`);
                  cropPreviewSection.style.display = "none";

                  console.log(`Cropped image ${index + 1} stored.`, blob);
                } else {
                  console.error("Failed to create cropped image blob.");
                }
              });
            }

            function toggleStockInput(checkbox, size) {
            const stockInput = document.getElementById(`stock_${size}`);
            if (checkbox.checked) {
                stockInput.style.display = "block";
            } else {
                stockInput.style.display = "none";
                stockInput.value = "";
              }
            }

            document.querySelectorAll('.size-checkbox').forEach(checkbox => {
            const size = checkbox.value;
            if (checkbox.checked) {
                document.getElementById(`stock_${size}`).style.display = "block";
            } else {
                document.getElementById(`stock_${size}`).style.display = "none";
            }
        });


        const modal = document.getElementById("sizesModal");
        const addStockBtn = document.getElementById("addStockBtn");
        const closeModal = document.getElementsByClassName("close")[0];

        addStockBtn.onclick = function() {
          modal.style.display = "block";
        }

        closeModal.onclick = function() {
          modal.style.display = "none";
        }

        window.onclick = function(event) {
          if (event.target == modal) {
            modal.style.display = "none";
          }
        }

        document.getElementById("saveSizesBtn").addEventListener("click",async (e)=> {
          let sizes = [];
          let stockQuantities = [];
          let valid=true

          const id=document.getElementById("productId").value

          document.querySelectorAll(".size-checkbox").forEach(checkbox => {
            const size = checkbox.value;
            const stockInput = document.getElementById(`stock_${size}`).value;
            if (checkbox.checked) {
            if (!stockInput) {
              swal.fire({
                text: `Enter stock for size ${size}`,
                icon: "error"
              });
              valid = false;
            }

            if (stockInput <= 0) {
              swal.fire({
                text: "Stock should be a positive number",
                icon: "error"
              });
              valid = false;
            }

            if (valid) {
              sizes.push(size);
              stockQuantities.push(stockInput);
            }
            }
        });

            if (!valid) {
              return false;
            }

            const data={
              sizes:sizes,
              stockQuantities:stockQuantities
            }

            try {
              const response=await fetch(`/admin/updatesizestocks/${id}`,{
                method:"PUT",
                headers:{"Content-Type":"application/json"},
                body:JSON.stringify(data)
              }) 
              const result=await response.json()
              if(result.success)
              {
                swal.fire({
                  text:result.message,
                  icon:"success"
                })
                setTimeout(() => {
                  window.location.href=`/admin/productmanagement/update/${id}`
                }, 1500);
              }else{
                swal.fire({
                  text:result.message,
                  icon:"error"
                })
              }
            } catch (error) {
              console.log(error)
            }
          });
        </script>

          </html>